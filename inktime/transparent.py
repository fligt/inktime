# AUTOGENERATED! DO NOT EDIT! File to edit: notebooks/02_thinking-transparent.ipynb (unless otherwise specified).

__all__ = ['transmission', 'kaleidoscope']

# Cell
import numpy as np
import matplotlib.pyplot as plt
import skimage.transform as skt

def transmission(D, K):
    '''Calculate the RGB transmission of thickness map *D* and the RGB absorbance tuple *K*'''

    # convert possible list or tuple into numpy array
    K = np.array(K)

    # prepare dimensions for broadcasting multiplication
    D = D[:,:, None]
    K = K[None, None, :]

    # multiply
    optical_density = D * K

    # Lambert-Beer
    transmission = np.exp(-optical_density)

    return transmission


def kaleidoscope(K_CMY=None, bg_color='white', return_layers=False):
    '''Create test image. '''

    # create foil stacks

    foil_0 = np.zeros([1000, 1000])
    foil_0[100:600, 100:600] = 1
    foil_0 = skt.rotate(foil_0, 12)

    foil_1 = np.zeros([1000, 1000])
    foil_1[200:700, 400:900] = 1
    foil_1 =  skt.rotate(foil_1, -8)

    foil_2 = np.zeros([1000, 1000])
    foil_2[400:900, 250:750] = 1
    foil_2 =  skt.rotate(foil_2, 4)

    foil_stack = foil_0 + foil_1 + foil_2

    # canvas
    bg = np.zeros([1300, 1300])

    left_stack = bg.copy()
    left_stack[0:1000, 0:1000] = foil_stack

    middle_stack = bg.copy()
    middle_stack[300:1300, 150:1150] = foil_stack

    right_stack = bg.copy()
    right_stack[0:1000, 300:1300] = foil_stack

    # colorize foil stacks

    if K_CMY is None:
        # default primaries
        K_CMY = [[1, 0.05, 0.07], [0.02, 1, 0.05], [0.07, 0.05, 1]]

    K_cyan, K_magenta, K_yellow = K_CMY

    T_cyan = transmission(left_stack, K_cyan)
    T_magenta = transmission(middle_stack, K_magenta)
    T_yellow = transmission(right_stack, K_yellow)

    # create background

    if bg_color is 'white':
        bg_color = np.array([1, 1, 1])
    elif bg_color is 'yellowish':
        bg_color = np.array([0.92, 0.9, 0.85])
    else:
        bg_color = np.array(bg_color)

    Rg = np.ones([1300, 1300, 3]) * bg_color

    # compose kaleidoscope image *R* by multiplying transmissions

    RGB_img = Rg * T_cyan * T_magenta * T_yellow

    if return_layers is False:

        return RGB_img

    else:

        return K_CMY, [Rg, T_cyan, T_magenta, T_yellow], RGB_img
